import telebot
import configure
import weather_parser as parser

bot = telebot.TeleBot(configure.config['token'])

city_url = ''

keyboard1 = telebot.util.quick_markup({
    '–î–∞ ‚úÖ': {'callback_data': 'yes'},
    '–ù–µ—Ç ‚ùå': {'callback_data': 'no'}
})

keyboard3 = telebot.util.quick_markup({
    '–î–∞ ‚úÖ': {'callback_data': 'yes_1'},
    '–ù–µ—Ç ‚ùå': {'callback_data': 'no_1'}
})

keyboard2 = telebot.util.quick_markup({
    '–°–µ–π—á–∞—Å ‚ö°Ô∏è': {'callback_data': 'now'},
    '–°–µ–≥–æ–¥–Ω—è üîç': {'callback_data': 'today'},
    '–ó–∞–≤—Ç—Ä–∞ ‚è±': {'callback_data': 'tomorrow'},
    '–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ ‚è∞': {'callback_data': '3rd_day'},
    '–î—Ä—É–≥–æ–π –¥–µ–Ω—å üóì': {'callback_data': 'other_day'}
})


@bot.message_handler(commands=['start', 'restart'])
def start_message(message):
    if message.text == '/start':
        bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.from_user.first_name}! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–≥–æ–¥–µ –≤ –†–æ—Å—Å–∏–∏!')
        bot.send_message(message.chat.id, '–ü–æ–≥–æ–¥–∞ –≤ –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?')
        bot.register_next_step_handler(message, send_message)
    else:
        bot.send_message(message.chat.id, '–ü–æ–≥–æ–¥–∞ –≤ –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?')
        bot.register_next_step_handler(message, send_message)


def send_message(message):
    global city_url

    bot.send_message(message.chat.id, '[INFO] –ò—â—É –≥–æ—Ä–æ–¥...')

    introduced_city = message.text.lower()
    possible_city, city_url = parser.find_city(introduced_city)

    if (not possible_city) or (not city_url):
        bot.send_message(message.chat.id, '–Ø –Ω–µ –Ω–∞—à—ë–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —ç—Ç–æ–º—É –≥–æ—Ä–æ–¥—É...\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–µ–µ')
        bot.register_next_step_handler(message, send_message)

    bot.send_message(message.chat.id, f'–í–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞ –ø–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {possible_city.title()}:', reply_markup=keyboard2)


def transfer(message):
    bot.send_message(message.chat.id, '–ü–æ–≥–æ–¥–∞ –≤ –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?')
    bot.register_next_step_handler(message, send_message)


@bot.callback_query_handler(func=lambda callback: callback.data in ['yes_1', 'no_1'])
def callback_yes_or_no(callback):
    data = callback.data

    if data == 'yes_1':
        transfer(callback.message)
    elif data == 'no_1':
        bot.send_message(callback.message.chat.id, '–ù—É –ª–∞–¥–Ω–æ –±—É–¥—É –∂–¥–∞—Ç—å, –ø–æ–∫–∞ –≤—ã –Ω–∞–ø–∏—à–µ—Ç–µ –∫–æ–º–∞–Ω–¥—É /restart')
        bot.send_message(callback.message.chat.id, '–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã')


@bot.callback_query_handler(func=lambda callback: True)
def callback_weather(callback):
    global city_url

    bot.send_message(callback.message.chat.id, '[INFO] –°–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ...')
    if callback.data == 'now':
        data = parser.get_weather_now(city_url)

        if data[0]:
            bot.send_message(callback.message.chat.id, f'üïî {data[1]}\nüå° {data[2]}\nüå° {data[3]}\nüí® {data[4]}\nüíß {data[5]}')
            bot.send_message(callback.message.chat.id, '–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –¥—Ä—É–≥–æ–º –≥–æ—Ä–æ–¥–µ?', reply_markup=keyboard3)
        else:
            bot.send_message(callback.message.chat.id, '[INFO] –°–ª—É—á–∏–ª–∞—Å—å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞...')
            bot.send_message(callback.message.chat.id, '–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –¥—Ä—É–≥–æ–º –≥–æ—Ä–æ–¥–µ?', reply_markup=keyboard3)

    elif callback.data == 'today':
        data = parser.get_weather_today(city_url)

        if data[0]:
            bot.send_message(callback.message.chat.id, f'üïî {data[1]}\nüå° {data[2]}\nüå° {data[3]}\nüí® {data[4]}\nüíß {data[5]}')
            bot.send_message(callback.message.chat.id, '–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –¥—Ä—É–≥–æ–º –≥–æ—Ä–æ–¥–µ?', reply_markup=keyboard3)
        else:
            bot.send_message(callback.message.chat.id, '[INFO] –°–ª—É—á–∏–ª–∞—Å—å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞...')
            bot.send_message(callback.message.chat.id, '–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –¥—Ä—É–≥–æ–º –≥–æ—Ä–æ–¥–µ?', reply_markup=keyboard3)


    elif callback.data == 'tomorrow':
        pass

    elif callback.data == '3rd_day':
        pass

    elif callback.data == 'other_day':
        pass


bot.infinity_polling()
